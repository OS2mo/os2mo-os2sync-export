# Generated by ariadne-codegen on 2024-09-06 13:59
# Source: queries.graphql
from typing import List
from typing import Optional
from typing import Union
from uuid import UUID

from .async_base_client import AsyncBaseClient
from .base_model import UNSET
from .base_model import UnsetType
from .get_address import GetAddress
from .get_address import GetAddressAddresses
from .get_engagement import GetEngagement
from .get_engagement import GetEngagementEngagements
from .get_f_k_org_user_map import GetFKOrgUserMap
from .get_f_k_org_user_map import GetFKOrgUserMapItusers
from .get_i_t_account_enddate import GetITAccountEnddate
from .get_i_t_account_enddate import GetITAccountEnddateItusers
from .get_i_t_accounts import GetITAccounts
from .get_i_t_accounts import GetITAccountsEmployees
from .get_it_user import GetItUser
from .get_it_user import GetItUserItusers
from .get_k_l_es import GetKLEs
from .get_k_l_es import GetKLEsKles
from .get_manager import GetManager
from .get_manager import GetManagerManagers
from .query_ancestors import QueryAncestors
from .query_ancestors import QueryAncestorsOrgUnits
from .query_employees import QueryEmployees
from .query_employees import QueryEmployeesEngagements


def gql(q: str) -> str:
    return q


class GraphQLClient(AsyncBaseClient):
    async def query_employees(
        self, uuids: Union[Optional[List[UUID]], UnsetType] = UNSET
    ) -> List[QueryEmployeesEngagements]:
        query = gql(
            """
            query QueryEmployees($uuids: [UUID!]) {
              engagements(org_units: $uuids) {
                current {
                  person {
                    uuid
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuids": uuids}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return QueryEmployees.parse_obj(data).engagements

    async def get_f_k_org_user_map(
        self, user_keys: Union[Optional[List[str]], UnsetType] = UNSET
    ) -> List[GetFKOrgUserMapItusers]:
        query = gql(
            """
            query GetFKOrgUserMap($user_keys: [String!]) {
              itusers(user_keys: $user_keys) {
                current {
                  person {
                    uuid
                  }
                  user_key
                  itsystem {
                    name
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"user_keys": user_keys}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetFKOrgUserMap.parse_obj(data).itusers

    async def get_i_t_accounts(
        self, uuids: Union[Optional[List[UUID]], UnsetType] = UNSET
    ) -> List[GetITAccountsEmployees]:
        query = gql(
            """
            query GetITAccounts($uuids: [UUID!]) {
              employees(uuids: $uuids) {
                objects {
                  itusers {
                    uuid
                    user_key
                    engagement_uuid
                    itsystem {
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuids": uuids}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetITAccounts.parse_obj(data).employees

    async def get_i_t_account_enddate(
        self, uuids: Union[Optional[List[UUID]], UnsetType] = UNSET
    ) -> List[GetITAccountEnddateItusers]:
        query = gql(
            """
            query GetITAccountEnddate($uuids: [UUID!]) {
              itusers(uuids: $uuids, from_date: null, to_date: null) {
                objects {
                  employee_uuid
                  org_unit_uuid
                  user_key
                  itsystem {
                    name
                  }
                  validity {
                    to
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuids": uuids}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetITAccountEnddate.parse_obj(data).itusers

    async def get_address(
        self, uuids: Union[Optional[List[UUID]], UnsetType] = UNSET
    ) -> List[GetAddressAddresses]:
        query = gql(
            """
            query GetAddress($uuids: [UUID!]) {
              addresses(uuids: $uuids, from_date: null, to_date: null) {
                objects {
                  employee_uuid
                  org_unit_uuid
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuids": uuids}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetAddress.parse_obj(data).addresses

    async def get_it_user(
        self, uuids: Union[Optional[List[UUID]], UnsetType] = UNSET
    ) -> List[GetItUserItusers]:
        query = gql(
            """
            query GetItUser($uuids: [UUID!]) {
              itusers(uuids: $uuids, from_date: null, to_date: null) {
                objects {
                  employee_uuid
                  org_unit_uuid
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuids": uuids}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetItUser.parse_obj(data).itusers

    async def get_manager(
        self, uuids: Union[Optional[List[UUID]], UnsetType] = UNSET
    ) -> List[GetManagerManagers]:
        query = gql(
            """
            query GetManager($uuids: [UUID!]) {
              managers(uuids: $uuids, from_date: null, to_date: null) {
                objects {
                  org_unit_uuid
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuids": uuids}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetManager.parse_obj(data).managers

    async def get_engagement(
        self, uuids: Union[Optional[List[UUID]], UnsetType] = UNSET
    ) -> List[GetEngagementEngagements]:
        query = gql(
            """
            query GetEngagement($uuids: [UUID!]) {
              engagements(uuids: $uuids, from_date: null, to_date: null) {
                objects {
                  employee_uuid
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuids": uuids}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetEngagement.parse_obj(data).engagements

    async def get_k_l_es(
        self, uuids: Union[Optional[List[UUID]], UnsetType] = UNSET
    ) -> List[GetKLEsKles]:
        query = gql(
            """
            query GetKLEs($uuids: [UUID!]) {
              kles(uuids: $uuids, from_date: null, to_date: null) {
                objects {
                  org_unit_uuid
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuids": uuids}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetKLEs.parse_obj(data).kles

    async def query_ancestors(
        self, uuids: Union[Optional[List[UUID]], UnsetType] = UNSET
    ) -> List[QueryAncestorsOrgUnits]:
        query = gql(
            """
            query QueryAncestors($uuids: [UUID!]) {
              org_units(uuids: $uuids) {
                current {
                  ancestors {
                    uuid
                  }
                  org_unit_hierarchy_model {
                    name
                  }
                  itusers {
                    itsystem {
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuids": uuids}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return QueryAncestors.parse_obj(data).org_units
