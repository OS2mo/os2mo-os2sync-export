# Generated by ariadne-codegen on 2024-09-12 14:51
# Source: queries.graphql

from typing import List
from typing import Optional
from typing import Union
from uuid import UUID

from .async_base_client import AsyncBaseClient
from .base_model import UNSET
from .base_model import UnsetType
from .read_user_i_t_accounts import ReadUserITAccounts
from .read_user_i_t_accounts import ReadUserITAccountsEmployees


def gql(q: str) -> str:
    return q


class GraphQLClient(AsyncBaseClient):
    async def read_user_i_t_accounts(
        self, uuid: UUID, it_user_keys: Union[Optional[List[str]], UnsetType] = UNSET
    ) -> ReadUserITAccountsEmployees:
        query = gql(
            """
            query ReadUserITAccounts($uuid: UUID!, $it_user_keys: [String!]) {
              employees(filter: {uuids: [$uuid]}) {
                objects {
                  current {
                    fk_org_users: itusers(filter: {itsystem: {user_keys: "FK-org"}}) {
                      user_key
                      external_id
                    }
                    AD_users: itusers(filter: {itsystem: {user_keys: $it_user_keys}}) {
                      uuid
                      user_key
                      external_id
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuid": uuid, "it_user_keys": it_user_keys}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return ReadUserITAccounts.parse_obj(data).employees
