# Generated by ariadne-codegen on 2024-10-01 11:39
# Source: queries.graphql

from typing import List
from typing import Optional
from typing import Union
from uuid import UUID

from .async_base_client import AsyncBaseClient
from .base_model import UNSET
from .base_model import UnsetType
from .read_orgunit import ReadOrgunit
from .read_orgunit import ReadOrgunitOrgUnits
from .read_user_i_t_accounts import ReadUserITAccounts
from .read_user_i_t_accounts import ReadUserITAccountsEmployees


def gql(q: str) -> str:
    return q


class GraphQLClient(AsyncBaseClient):
    async def read_user_i_t_accounts(
        self, uuid: UUID, it_user_keys: Union[Optional[List[str]], UnsetType] = UNSET
    ) -> ReadUserITAccountsEmployees:
        query = gql(
            """
            query ReadUserITAccounts($uuid: UUID!, $it_user_keys: [String!]) {
              employees(filter: {uuids: [$uuid]}) {
                objects {
                  current {
                    fk_org_uuids: itusers(filter: {itsystem: {user_keys: "FK-org"}}) {
                      user_key
                      external_id
                    }
                    itusers: itusers(filter: {itsystem: {user_keys: $it_user_keys}}) {
                      uuid
                      user_key
                      external_id
                      person {
                        cpr_number
                        name
                        nickname
                      }
                      engagement {
                        extension_3
                        org_unit {
                          uuid
                        }
                        job_function {
                          name
                        }
                      }
                      email: addresses {
                        address_type(filter: {scope: "EMAIL"}) {
                          uuid
                        }
                        visibility {
                          user_key
                        }
                        value
                      }
                      phone: addresses {
                        address_type(filter: {scope: "PHONE"}) {
                          uuid
                        }
                        visibility {
                          user_key
                        }
                        value
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuid": uuid, "it_user_keys": it_user_keys}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return ReadUserITAccounts.parse_obj(data).employees

    async def read_orgunit(self, uuid: UUID) -> ReadOrgunitOrgUnits:
        query = gql(
            """
            query read_orgunit($uuid: UUID!) {
              org_units(filter: {uuid: [$uuids]}) {
                objects {
                  current {
                    uuid
                    name
                    parent {
                      uuid
                    }
                    ancestors {
                      uuid
                    }
                    unit_type {
                      uuid
                    }
                    org_unit_level {
                      uuid
                    }
                    org_unit_hierarchy_model {
                      name
                    }
                    addresses {
                      address_type {
                        scope
                        uuid
                        user_key
                      }
                      name
                    }
                    itusers(filter: {user_keys: "FK-org uuid"}) {
                      user_key
                    }
                    managers {
                      person {
                        uuid
                      }
                    }
                    kles {
                      kle_number {
                        uuid
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuid": uuid}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return ReadOrgunit.parse_obj(data).org_units
