# Generated by ariadne-codegen on 2024-09-10 11:14
# Source: queries.graphql

from uuid import UUID

from .async_base_client import AsyncBaseClient
from .read_user import ReadUser
from .read_user import ReadUserItusers


def gql(q: str) -> str:
    return q


class GraphQLClient(AsyncBaseClient):
    async def read_user(self, uuids: UUID) -> ReadUserItusers:
        query = gql(
            """
            query ReadUser($uuids: UUID!) {
              itusers(filter: {uuids: [$uuids]}) {
                objects {
                  current {
                    user_key
                    external_id
                    person {
                      cpr_number
                      given_name
                      surname
                      nickname_given_name
                      nickname_surname
                    }
                    engagement {
                      org_unit {
                        uuid
                      }
                      job_function {
                        name
                      }
                    }
                    email: addresses {
                      address_type(filter: {scope: "EMAIL"}) {
                        name
                        scope
                      }
                      value
                    }
                    phone: addresses {
                      address_type(filter: {scope: "PHONE"}) {
                        name
                        scope
                      }
                      value
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuids": uuids}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return ReadUser.parse_obj(data).itusers
