# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
import asyncio
from uuid import UUID

import click
from authlib.integrations.httpx_client import AsyncOAuth2Client  # type: ignore
from more_itertools import one
from more_itertools import only
from tqdm.asyncio import tqdm

from os2sync_export.autogenerated_graphql_client import GraphQLClient
from os2sync_export.autogenerated_graphql_client.locate_f_k_user import LocateFKUser
from os2sync_export.config import Settings
from os2sync_export.os2sync import get_os2sync_client

"""
Script for deleting fk-org users that are not employed in os2mo.

Run independently with:

> docker compose run --rm os2sync_export python -m os2sync_export.cleanup_fk_users --dry-run
"""


def user_is_passive(user: LocateFKUser) -> bool:
    employee = only(user.employees.objects, default=None)
    ituser = only(user.itusers.objects, default=None)

    if ituser and ituser.current and ituser.current.person:
        if one(ituser.current.person).engagements:
            return False

    if employee and employee.current:
        if employee.current.engagements:
            return False

    return True


async def find_passive_users(
    graphql_client: GraphQLClient,
    fk_org_uuids: set[UUID],
) -> set[UUID]:
    # Find the user and check for engagements in MO. The fk-org uuid might be from an it-account, or i might be from the persons uuid. We need to check both possibilities
    return {
        fk_uuid
        for fk_uuid in fk_org_uuids
        if user_is_passive(
            user=await graphql_client.locate_f_k_user(
                user_keys=str(fk_uuid), uuid=fk_uuid
            ),
        )
    }


@click.command()
@click.option("--dry-run", is_flag=True)
def cleanup_users(dry_run: bool):
    # Setup graphql_client
    settings = Settings()  # type: ignore
    mo_client = AsyncOAuth2Client(
        base_url=settings.fastramqpi.mo_url,
        client_id=settings.fastramqpi.client_id,
        client_secret=settings.fastramqpi.client_secret.get_secret_value(),
        grant_type="client_credentials",
        token_endpoint=f"{settings.fastramqpi.auth_server}/realms/{settings.fastramqpi.auth_realm}/protocol/openid-connect/token",
        token={"expires_at": -1, "access_token": ""},
        timeout=settings.fastramqpi.graphql_timeout,
    )
    graphql_client = GraphQLClient(
        url=f"{settings.fastramqpi.mo_url}/graphql/v22",
        http_client=mo_client,
    )

    # Fetch users from os2sync
    os2sync_client = get_os2sync_client(
        settings=settings, session=None, dry_run=dry_run
    )
    click.echo("Waiting for os2sync to build the hierarchy")
    h_uuid = os2sync_client.trigger_hierarchy()
    _, existing_users = os2sync_client.get_hierarchy(h_uuid)

    # Find users without active engagements in MO.
    click.echo(
        f"Found {len(existing_users)} users in fk-org. Checking for engagements in MO"
    )
    existing_user_uuids = {UUID(u["Uuid"]) for u in existing_users}
    passive_users = asyncio.run(
        find_passive_users(
            graphql_client=graphql_client, fk_org_uuids=existing_user_uuids
        )
    )
    click.echo(f"Passive users: {len(passive_users)}")
    for u in tqdm(
        passive_users, desc="deleting passive users from fk-org", unit="User"
    ):
        os2sync_client.delete_user(u)


if __name__ == "__main__":
    cleanup_users()
