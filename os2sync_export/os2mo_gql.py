# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID

import structlog
from more_itertools import one
from more_itertools import only

from os2sync_export.autogenerated_graphql_client.client import GraphQLClient
from os2sync_export.autogenerated_graphql_client.read_user_i_t_accounts import (
    ReadUserITAccountsEmployeesObjectsCurrentADUsers,
)
from os2sync_export.autogenerated_graphql_client.read_user_i_t_accounts import (
    ReadUserITAccountsEmployeesObjectsCurrentFkOrgUsers,
)
from os2sync_export.config import Settings
from os2sync_export.os2sync import OS2SyncClient

logger = structlog.stdlib.get_logger()


class OS2SyncExporter:
    def __init__(
        self,
        settings: Settings,
        os2sync_client: OS2SyncClient,
        graphql_client: GraphQLClient,
    ) -> None:
        self.settings = settings
        self.os2sync_client = os2sync_client
        self.graphql_client = graphql_client

    async def read_fk_users_from_person(
        self,
        uuid: UUID,
    ):
        it_accounts = await self.graphql_client.read_user_i_t_accounts(
            uuid=uuid, it_user_keys=self.settings.uuid_from_it_systems
        )
        current_accounts = one(it_accounts.objects).current
        if current_accounts is None:
            return [], []
        fk_accounts = current_accounts.fk_org_users
        ad_accounts = current_accounts.a_d_users
        return fk_accounts, ad_accounts

    async def create_mo_fk_org_ituser(self, uuid: UUID):
        # TODO: create fk-org account in MO
        pass

    async def update_fk_org_user(
        self,
        it_user: ReadUserITAccountsEmployeesObjectsCurrentADUsers,
        fk_org_it_user: ReadUserITAccountsEmployeesObjectsCurrentFkOrgUsers | None,
    ):
        # TODO:
        # Lookup MO it-user info
        # Convert to os2sync-model
        self.os2sync_client.sync_user(it_user)
        if fk_org_it_user is None:
            assert it_user.external_id
            await self.create_mo_fk_org_ituser(uuid=UUID(it_user.external_id))

    async def delete_fk_org_user(
        self,
        fk_org_it_user: ReadUserITAccountsEmployeesObjectsCurrentFkOrgUsers,
    ):
        self.os2sync_client.delete_user(UUID(fk_org_it_user.external_id))
        # TODO: delete fk-org it-user from MO

    async def sync_mo_user_to_fk_org(self, uuid: UUID):
        fk_org_users, it_users = await self.read_fk_users_from_person(
            uuid=uuid,
        )

        logger.info(
            "Found the following itusers",
            uuid=uuid,
            fk_org_users=fk_org_users,
            ad_users=it_users,
        )
        for it_user in it_users:
            fk_org_account = only(
                filter(lambda f: f.user_key == it_user.external_id, fk_org_users)
            )
            await self.update_fk_org_user(it_user, fk_org_account)
        for fk_org_user in filter(
            lambda f: f.external_id not in {a.external_id for a in it_users},
            fk_org_users,
        ):
            await self.delete_fk_org_user(fk_org_user)
