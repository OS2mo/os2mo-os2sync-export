# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID

import structlog
from more_itertools import one
from more_itertools import only

from os2sync_export.autogenerated_graphql_client.read_user_i_t_accounts import (
    ReadUserITAccountsEmployeesObjectsCurrentADUsers,
)
from os2sync_export.autogenerated_graphql_client.read_user_i_t_accounts import (
    ReadUserITAccountsEmployeesObjectsCurrentFkOrgUsers,
)
from os2sync_export.config import Settings
from os2sync_export.depends import GraphQLClient

logger = structlog.stdlib.get_logger()


async def read_fk_users_from_person(
    graphql_client: GraphQLClient, uuid: UUID, it_user_keys: list[str]
) -> tuple[
    list[ReadUserITAccountsEmployeesObjectsCurrentFkOrgUsers],
    list[ReadUserITAccountsEmployeesObjectsCurrentADUsers],
]:
    it_accounts = await graphql_client.read_user_i_t_accounts(
        uuid=uuid, it_user_keys=it_user_keys
    )
    current_accounts = one(it_accounts.objects).current
    if current_accounts is None:
        return
    fk_accounts = current_accounts.fk_org_users
    ad_accounts = current_accounts.a_d_users
    return fk_accounts, ad_accounts


async def update_fk_org_user(
    it_user: ReadUserITAccountsEmployeesObjectsCurrentADUsers | None,
    fk_org_it_user: ReadUserITAccountsEmployeesObjectsCurrentFkOrgUsers | None,
):
    if fk_org_it_user is None:
        # New user, create it-user in MO. This should trigger a new sync of that user.
        pass
    raise NotImplementedError


async def delete_fk_org_user(
    fk_org_it_user: ReadUserITAccountsEmployeesObjectsCurrentFkOrgUsers,
):
    raise NotImplementedError


async def sync_mo_user_to_fk_org(
    graphql_client: GraphQLClient, uuid: UUID, settings: Settings
):
    fk_org_users, it_users = await read_fk_users_from_person(
        graphql_client=graphql_client,
        uuid=uuid,
        it_user_keys=settings.uuid_from_it_systems,
    )

    logger.info(
        "Found the following itusers",
        uuid=uuid,
        fk_org_users=fk_org_users,
        ad_users=it_users,
    )
    for it_user in it_users:
        fk_org_account = only(
            filter(lambda f: f.external_id == it_user.external_id, fk_org_users)
        )
        await update_fk_org_user(it_user, fk_org_account)
    for fk_org_user in filter(
        lambda f: f.external_id not in {a.external_id for a in it_users}, fk_org_users
    ):
        await delete_fk_org_user(fk_org_user)
