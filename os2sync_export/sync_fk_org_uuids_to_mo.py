# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
import asyncio
from datetime import datetime
from uuid import UUID

import click
from authlib.integrations.httpx_client import AsyncOAuth2Client  # type: ignore
from more_itertools import only
from tqdm.asyncio import tqdm

from os2sync_export.autogenerated_graphql_client import GraphQLClient
from os2sync_export.config import Settings
from os2sync_export.os2mo_gql import find_fk_itsystem_uuid
from os2sync_export.os2mo_gql import read_fk_users_from_person
from os2sync_export.os2sync import get_os2sync_client

"""
Script for synchronizing fk-org uuids to IT accounts in MO

This is intended to be used once to ensure the current uuids in fk-org are not overwritten once the integration is switched to the new version.

Run independently with:

> docker compose run --rm os2sync_export python -m os2sync_export.sync_fk_org_uuids_to_mo --dry-run
"""


async def check_user_fk_org_it_accounts(
    graphql_client: GraphQLClient,
    fk_org_uuid: UUID,
    fk_org_username: str,
    dry_run: bool = False,
) -> None:
    # See if the uuid matches a user in MO. The it_user_keys field is set to "irrelevant" as we are only interested in fk-org it-user accounts
    try:
        res, _ = await read_fk_users_from_person(
            graphql_client=graphql_client, uuid=fk_org_uuid, it_user_keys=["Irrelevant"]
        )
        fk_account = only(res)
    except ValueError:
        click.echo(f"No mo user found with uuid={fk_org_uuid}")
        return
    if fk_account:
        # This user already has an fk-org account
        return
    if dry_run:
        click.echo(
            f"DRY-RUN: would have created fk-org MO it account for {fk_org_uuid=}, {fk_org_username=}"
        )
        return
    fk_org_itsystem_uuid = await find_fk_itsystem_uuid(graphql_client)
    await graphql_client.create_i_t_user(
        external_id=str(fk_org_uuid),
        itsystem=fk_org_itsystem_uuid,
        person=fk_org_uuid,
        user_key=fk_org_username,
        from_=datetime.now(),
    )


@click.command()
@click.option("--dry-run", is_flag=True)
def trigger_sync_fk_uuids_to_mo(dry_run: bool):
    # Setup graphql_client
    settings = Settings()  # type: ignore
    mo_client = AsyncOAuth2Client(
        base_url=settings.fastramqpi.mo_url,
        client_id=settings.fastramqpi.client_id,
        client_secret=settings.fastramqpi.client_secret.get_secret_value(),
        grant_type="client_credentials",
        token_endpoint=f"{settings.fastramqpi.auth_server}/realms/{settings.fastramqpi.auth_realm}/protocol/openid-connect/token",
        token={"expires_at": -1, "access_token": ""},
        timeout=settings.fastramqpi.graphql_timeout,
    )
    graphql_client = GraphQLClient(
        url=f"{settings.fastramqpi.mo_url}/graphql/v22",
        http_client=mo_client,
    )

    # Fetch users from os2sync
    os2sync_client = get_os2sync_client(
        settings=settings, session=None, dry_run=dry_run
    )
    click.echo("Waiting for os2sync to build the hierarchy")
    h_uuid = os2sync_client.trigger_hierarchy()
    _, existing_users = os2sync_client.get_hierarchy(h_uuid)

    # Ensure each fk-org user exists as an ITuser in MO
    click.echo(f"Found {len(existing_users)} users to check")
    asyncio.run(
        tqdm.gather(
            *[
                check_user_fk_org_it_accounts(
                    graphql_client=graphql_client,
                    fk_org_uuid=UUID(u["Uuid"]),
                    fk_org_username=u["UserId"],
                    dry_run=dry_run,
                )
                for u in existing_users
            ]
        )
    )


if __name__ == "__main__":
    trigger_sync_fk_uuids_to_mo()
