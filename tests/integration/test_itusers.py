# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from unittest.mock import MagicMock
from unittest.mock import call
from uuid import uuid4

import pytest
from httpx import AsyncClient
from more_itertools import first

from os2sync_export.autogenerated_graphql_client import GraphQLClient
from os2sync_export.autogenerated_graphql_client.input_types import AddressCreateInput
from os2sync_export.autogenerated_graphql_client.input_types import ClassFilter
from os2sync_export.autogenerated_graphql_client.input_types import FacetFilter
from os2sync_export.autogenerated_graphql_client.input_types import ITSystemFilter
from os2sync_export.autogenerated_graphql_client.input_types import ITUserCreateInput
from os2sync_export.autogenerated_graphql_client.input_types import RAValidityInput
from os2sync_export.os2mo_gql import sync_mo_user_to_fk_org
from os2sync_export.os2sync_models import Person
from os2sync_export.os2sync_models import Position
from os2sync_export.os2sync_models import User


@pytest.mark.integration_test
async def test_account_with_addresses(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    create_person,
    create_engagements,
    set_settings,
) -> None:
    # Test that emails are sent to fk-org with their correct account.
    # Arrange
    adguid1 = uuid4()
    adguid2 = uuid4()
    os2sync_mock = MagicMock()
    person_uuid = create_person.uuid

    itsystem_AD = await graphql_client.testing__get_itsystem(
        ITSystemFilter(user_keys=["Active Directory"], from_date=None, to_date=None)
    )
    AD_uuid = first(itsystem_AD.objects).uuid
    # AD users
    ad_user_1 = await graphql_client.testing__ituser_create(
        input=ITUserCreateInput(
            person=person_uuid,
            user_key="AD-username 1",
            external_id=str(adguid1),
            engagements=[e.uuid for e in create_engagements],
            itsystem=AD_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    ad_user_2 = await graphql_client.testing__ituser_create(
        input=ITUserCreateInput(
            person=person_uuid,
            user_key="AD-username 2",
            external_id=str(adguid2),
            engagements=[e.uuid for e in create_engagements],
            itsystem=AD_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    # find address types:
    email_address_types = await graphql_client.testing__get_class(
        ClassFilter(
            facet=FacetFilter(user_keys=["employee_address_type"]),  # type: ignore
            scope=["EMAIL"],
        )
    )
    email_address_type_uuid = first(email_address_types.objects).uuid
    mobile_address_types = await graphql_client.testing__get_class(
        ClassFilter(
            facet=FacetFilter(user_keys=["employee_address_type"]),  # type: ignore
            scope=["PHONE"],
            user_keys=["mobile"],
        )
    )
    mobile_address_type_uuid = first(mobile_address_types.objects).uuid
    landline_address_types = await graphql_client.testing__get_class(
        ClassFilter(
            facet=FacetFilter(user_keys=["employee_address_type"]),  # type: ignore
            scope=["PHONE"],
            user_keys=["landline"],
        )
    )
    landline_address_type_uuid = first(landline_address_types.objects).uuid

    settings = set_settings(
        email_scope_classes=[email_address_type_uuid],
        phone_scope_classes=[mobile_address_type_uuid],
        landline_scope_classes=[landline_address_type_uuid],
    )
    # Create two email-addresses - one connected to each it-account
    await graphql_client.testing__address_create(
        input=AddressCreateInput(
            employee=create_person.uuid,
            value="bsg@example.com",
            address_type=email_address_type_uuid,
            ituser=ad_user_1.uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    await graphql_client.testing__address_create(
        input=AddressCreateInput(
            employee=create_person.uuid,
            value="bsg2@example.com",
            address_type=email_address_type_uuid,
            ituser=ad_user_2.uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    # Create a phone number for one it-account
    await graphql_client.testing__address_create(
        input=AddressCreateInput(
            employee=create_person.uuid,
            value="11223344",
            address_type=mobile_address_type_uuid,
            ituser=ad_user_1.uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    # Create a landlines for the other it_account
    await graphql_client.testing__address_create(
        input=AddressCreateInput(
            employee=create_person.uuid,
            value="12345678",
            address_type=landline_address_type_uuid,
            ituser=ad_user_2.uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    # Act
    await sync_mo_user_to_fk_org(
        uuid=person_uuid,
        graphql_client=graphql_client,
        settings=settings,
        os2sync_client=os2sync_mock,
    )
    # Assert
    assert os2sync_mock.update_user.call_count == 2
    os2sync_mock.delete_user.assert_not_called()

    expected = [
        call(
            User(
                Uuid=adguid1,
                ShortKey=None,
                UserId="AD-username 1",
                Person=Person(Name="Brian Graversen", Cpr=None),
                Positions=[
                    Position(
                        Name="Tester",
                        OrgUnitUuid=first(create_engagements).org_unit,
                        StartDate=None,
                        StopDate=None,
                    )
                ],
                PhoneNumber="11223344",
                Landline=None,
                Email="bsg@example.com",
                Location=None,
                RacfID=None,
                FMKID=None,
                DateTime=None,
            )
        ),
        call(
            User(
                Uuid=adguid2,
                ShortKey=None,
                UserId="AD-username 2",
                Person=Person(Name="Brian Graversen", Cpr=None),
                Positions=[
                    Position(
                        Name="Tester",
                        OrgUnitUuid=first(create_engagements).org_unit,
                        StartDate=None,
                        StopDate=None,
                    )
                ],
                PhoneNumber=None,
                Landline="12345678",
                Email="bsg2@example.com",
                Location=None,
                RacfID=None,
                FMKID=None,
                DateTime=None,
            ),
        ),
    ]
    assert len(os2sync_mock.update_user.call_args_list) == 2
    for c in os2sync_mock.update_user.call_args_list:
        assert c in expected
