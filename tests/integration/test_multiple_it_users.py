# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from datetime import timedelta
from unittest.mock import MagicMock
from unittest.mock import call
from uuid import uuid4

import pytest
from httpx import AsyncClient
from more_itertools import first
from more_itertools import one

from os2sync_export.autogenerated_graphql_client import GraphQLClient
from os2sync_export.autogenerated_graphql_client.input_types import ITSystemFilter
from os2sync_export.autogenerated_graphql_client.input_types import (
    ITSystemTerminateInput,
)
from os2sync_export.autogenerated_graphql_client.input_types import ITUserCreateInput
from os2sync_export.autogenerated_graphql_client.input_types import RAValidityInput
from os2sync_export.exceptions import ITSystemError
from os2sync_export.os2mo_gql import hash_uuid
from os2sync_export.os2mo_gql import sync_mo_user_to_fk_org
from os2sync_export.os2sync_models import Person
from os2sync_export.os2sync_models import Position
from os2sync_export.os2sync_models import User


@pytest.mark.integration_test
async def test_no_engagements(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    create_person,
    mock_settings,
) -> None:
    # Arrange
    adguid = uuid4()
    fkorg_uuid = uuid4()
    os2sync_mock = MagicMock()

    person_uuid = create_person.uuid
    itsystem_AD = await graphql_client.testing__get_itsystem(
        ITSystemFilter(user_keys=["Active Directory"], from_date=None, to_date=None)
    )
    AD_uuid = first(itsystem_AD.objects).uuid
    itsystem_FK = await graphql_client.testing__get_itsystem(
        ITSystemFilter(user_keys=["FK-ORG-UUID"], from_date=None, to_date=None)
    )
    FK_uuid = first(itsystem_FK.objects).uuid

    await graphql_client.testing__ituser_create(
        input=ITUserCreateInput(
            person=person_uuid,
            user_key="AD-username 1",
            external_id=str(adguid),
            engagements=None,
            itsystem=AD_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    await graphql_client.testing__ituser_create(
        input=ITUserCreateInput(
            uuid=uuid4(),
            person=person_uuid,
            user_key=str(adguid),
            external_id=str(fkorg_uuid),
            itsystem=FK_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )

    # Act
    await sync_mo_user_to_fk_org(
        uuid=person_uuid,
        graphql_client=graphql_client,
        settings=mock_settings,
        os2sync_client=os2sync_mock,
    )
    # Assert
    os2sync_mock.update_user.assert_not_called()
    os2sync_mock.delete_user.assert_called_once_with(fkorg_uuid)
    # Check that the expected it-accounts exists in MO
    it_accounts = await graphql_client.read_user_i_t_accounts(
        uuid=person_uuid, it_user_keys=["Active Directory"]
    )
    assert one(it_accounts.objects).current.fk_org_uuids == []  # type: ignore


@pytest.mark.integration_test
async def test_two_ad_one_fk(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    create_person,
    create_engagements,
    mock_settings,
) -> None:
    # Arrange
    adguid1 = uuid4()
    adguid2 = uuid4()
    fkorg_uuid = uuid4()
    os2sync_mock = MagicMock()
    person_uuid = create_person.uuid
    itsystem_AD = await graphql_client.testing__get_itsystem(
        ITSystemFilter(user_keys=["Active Directory"], from_date=None, to_date=None)
    )
    AD_uuid = first(itsystem_AD.objects).uuid
    itsystem_FK = await graphql_client.testing__get_itsystem(
        ITSystemFilter(user_keys=["FK-ORG-UUID"], from_date=None, to_date=None)
    )
    FK_uuid = first(itsystem_FK.objects).uuid
    # AD user 1
    await graphql_client.testing__ituser_create(
        input=ITUserCreateInput(
            person=person_uuid,
            user_key="AD-username 1",
            external_id=str(adguid1),
            engagements=[e.uuid for e in create_engagements],
            itsystem=AD_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    # FK-org user 1
    await graphql_client.testing__ituser_create(
        input=ITUserCreateInput(
            uuid=uuid4(),
            person=person_uuid,
            user_key=str(adguid1),
            external_id=str(fkorg_uuid),
            itsystem=FK_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    await graphql_client.testing__ituser_create(
        input=ITUserCreateInput(
            uuid=uuid4(),
            person=person_uuid,
            user_key="AD-username 2",
            external_id=str(adguid2),
            # TODO: connect some other engagement
            engagements=[e.uuid for e in create_engagements],
            itsystem=AD_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    expected = [
        call(
            User(
                Uuid=fkorg_uuid,
                ShortKey=None,
                UserId="AD-username 1",
                Person=Person(
                    Name="Brian Graversen", Cpr=None, Uuid=hash_uuid(person_uuid)
                ),
                Positions=[
                    Position(
                        Name="Tester",
                        OrgUnitUuid=first(create_engagements).org_unit,
                        StartDate=None,
                        StopDate=None,
                    )
                ],
                PhoneNumber=None,
                Landline=None,
                Email=None,
                Location=None,
                RacfID=None,
                FMKID=None,
                DateTime=None,
            )
        ),
        call(
            User(
                Uuid=adguid2,
                ShortKey=None,
                UserId="AD-username 2",
                Person=Person(
                    Name="Brian Graversen", Cpr=None, Uuid=hash_uuid(person_uuid)
                ),
                Positions=[
                    Position(
                        Name="Tester",
                        OrgUnitUuid=first(create_engagements).org_unit,
                        StartDate=None,
                        StopDate=None,
                    )
                ],
                PhoneNumber=None,
                Landline=None,
                Email=None,
                Location=None,
                RacfID=None,
                FMKID=None,
                DateTime=None,
            )
        ),
    ]
    # Act
    await sync_mo_user_to_fk_org(
        uuid=person_uuid,
        graphql_client=graphql_client,
        settings=mock_settings,
        os2sync_client=os2sync_mock,
    )
    # Assert
    assert os2sync_mock.update_user.call_count == len(expected)
    os2sync_mock.delete_user.assert_not_called()
    for c in os2sync_mock.update_user.call_args_list:
        assert c in expected

    # Check that the expected it-accounts exists in MO
    it_accounts = await graphql_client.read_user_i_t_accounts(
        uuid=person_uuid, it_user_keys=["Active Directory"]
    )
    fk_org_it_users = one(it_accounts.objects).current.fk_org_uuids  # type: ignore
    for fk_user in fk_org_it_users:
        if fk_user.user_key == str(adguid1):
            assert fk_user.external_id == str(fkorg_uuid)
        elif fk_user.user_key == str(adguid2):
            assert fk_user.external_id == str(adguid2)
        else:
            assert False


@pytest.mark.integration_test
async def test_one_ad_zero_fk(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    create_person,
    create_engagements,
    mock_settings,
) -> None:
    # Test lookup to fk-org
    # Arrange
    adguid = uuid4()
    os2sync_mock = MagicMock()
    person_uuid = create_person.uuid
    os2sync_mock.os2sync_get_user.return_value = {
        "Uuid": person_uuid,
        "UserId": "BSG",
        "Person": {"Name": "Brian"},
        "Positions": [{"Name": "tester", "OrgUnitUuid": uuid4()}],
        "PhoneNumber": "None",
        "Landline": "None",
        "Email": "None",
    }
    itsystem_AD = await graphql_client.testing__get_itsystem(
        ITSystemFilter(user_keys=["Active Directory"], from_date=None, to_date=None)
    )
    AD_uuid = first(itsystem_AD.objects).uuid
    # AD user
    await graphql_client.testing__ituser_create(
        input=ITUserCreateInput(
            person=person_uuid,
            user_key="AD-username 1",
            external_id=str(adguid),
            engagements=[e.uuid for e in create_engagements],
            itsystem=AD_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    # Act
    await sync_mo_user_to_fk_org(
        uuid=person_uuid,
        graphql_client=graphql_client,
        settings=mock_settings,
        os2sync_client=os2sync_mock,
    )
    # Assert
    assert os2sync_mock.update_user.call_count == 1
    os2sync_mock.delete_user.assert_not_called()

    expected = [
        call(
            User(
                Uuid=person_uuid,
                ShortKey=None,
                UserId="AD-username 1",
                Person=Person(
                    Name="Brian Graversen", Cpr=None, Uuid=hash_uuid(person_uuid)
                ),
                Positions=[
                    Position(
                        Name="Tester",
                        OrgUnitUuid=first(create_engagements).org_unit,
                        StartDate=None,
                        StopDate=None,
                    )
                ],
                PhoneNumber=None,
                Landline=None,
                Email=None,
                Location=None,
                RacfID=None,
                FMKID=None,
                DateTime=None,
            )
        ),
    ]
    assert os2sync_mock.update_user.call_args_list == expected

    # Check that the expected it-accounts exists in MO
    it_accounts = await graphql_client.read_user_i_t_accounts(
        uuid=person_uuid, it_user_keys=["Active Directory"]
    )
    fk_org_it_users = one(it_accounts.objects).current.fk_org_uuids  # type: ignore
    assert one(fk_org_it_users).user_key == str(adguid)
    assert one(fk_org_it_users).external_id == str(person_uuid)


@pytest.mark.integration_test
async def test_one_ad_zero_fk_user_not_found(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    create_person,
    create_engagements,
    mock_settings,
) -> None:
    # Test lookup to fk-org when the user isn't in fk-org yet
    # Arrange
    adguid = uuid4()
    os2sync_mock = MagicMock()
    person_uuid = create_person.uuid
    os2sync_mock.os2sync_get_user.side_effect = KeyError()

    itsystem_AD = await graphql_client.testing__get_itsystem(
        ITSystemFilter(user_keys=["Active Directory"], from_date=None, to_date=None)
    )
    AD_uuid = first(itsystem_AD.objects).uuid
    # AD user
    await graphql_client.testing__ituser_create(
        input=ITUserCreateInput(
            person=person_uuid,
            user_key="AD-username 1",
            external_id=str(adguid),
            engagements=[e.uuid for e in create_engagements],
            itsystem=AD_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    # Act
    await sync_mo_user_to_fk_org(
        uuid=person_uuid,
        graphql_client=graphql_client,
        settings=mock_settings,
        os2sync_client=os2sync_mock,
    )
    # Assert
    assert os2sync_mock.update_user.call_count == 1
    os2sync_mock.delete_user.assert_not_called()

    expected = [
        call(
            User(
                Uuid=adguid,
                ShortKey=None,
                UserId="AD-username 1",
                Person=Person(
                    Name="Brian Graversen", Cpr=None, Uuid=hash_uuid(person_uuid)
                ),
                Positions=[
                    Position(
                        Name="Tester",
                        OrgUnitUuid=first(create_engagements).org_unit,
                        StartDate=None,
                        StopDate=None,
                    )
                ],
                PhoneNumber=None,
                Landline=None,
                Email=None,
                Location=None,
                RacfID=None,
                FMKID=None,
                DateTime=None,
            )
        ),
    ]
    assert os2sync_mock.update_user.call_args_list == expected

    # Check that the expected it-accounts exists in MO
    it_accounts = await graphql_client.read_user_i_t_accounts(
        uuid=person_uuid, it_user_keys=["Active Directory"]
    )
    fk_org_it_users = one(it_accounts.objects).current.fk_org_uuids  # type: ignore
    assert one(fk_org_it_users).user_key == str(adguid)
    assert one(fk_org_it_users).external_id == str(adguid)


@pytest.mark.integration_test
async def test_one_ad_zero_fk_user_not_active(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    create_person,
    create_engagements,
    mock_settings,
) -> None:
    # Test lookup to fk-org when the user isn't in fk-org yet
    # Arrange
    adguid = uuid4()
    os2sync_mock = MagicMock()
    person_uuid = create_person.uuid
    os2sync_mock.os2sync_get_user.return_value = {
        "Uuid": person_uuid,
        "UserId": "BSG",
        "Person": {"Name": None, "Cpr": None},
        "Positions": [],
        "PhoneNumber": "None",
        "Landline": "None",
        "Email": "None",
    }
    itsystem_AD = await graphql_client.testing__get_itsystem(
        ITSystemFilter(user_keys=["Active Directory"], from_date=None, to_date=None)
    )
    AD_uuid = first(itsystem_AD.objects).uuid
    # AD user
    await graphql_client.testing__ituser_create(
        input=ITUserCreateInput(
            person=person_uuid,
            user_key="AD-username 1",
            external_id=str(adguid),
            engagements=[e.uuid for e in create_engagements],
            itsystem=AD_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    # Act
    await sync_mo_user_to_fk_org(
        uuid=person_uuid,
        graphql_client=graphql_client,
        settings=mock_settings,
        os2sync_client=os2sync_mock,
    )
    # Assert
    assert os2sync_mock.update_user.call_count == 1
    os2sync_mock.delete_user.assert_not_called()

    expected = [
        call(
            User(
                Uuid=person_uuid,
                ShortKey=None,
                UserId="AD-username 1",
                Person=Person(
                    Name="Brian Graversen", Cpr=None, Uuid=hash_uuid(person_uuid)
                ),
                Positions=[
                    Position(
                        Name="Tester",
                        OrgUnitUuid=first(create_engagements).org_unit,
                        StartDate=None,
                        StopDate=None,
                    )
                ],
                PhoneNumber=None,
                Landline=None,
                Email=None,
                Location=None,
                RacfID=None,
                FMKID=None,
                DateTime=None,
            )
        ),
    ]
    assert os2sync_mock.update_user.call_args_list == expected

    # Check that the expected it-accounts exists in MO
    it_accounts = await graphql_client.read_user_i_t_accounts(
        uuid=person_uuid, it_user_keys=["Active Directory"]
    )
    fk_org_it_users = one(it_accounts.objects).current.fk_org_uuids  # type: ignore
    assert one(fk_org_it_users).user_key == str(adguid)
    assert one(fk_org_it_users).external_id == str(person_uuid)


@pytest.mark.integration_test
async def test_one_ad_zero_fk_dry_run(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    create_person,
    create_engagements,
    mock_settings,
) -> None:
    # Test lookup to fk-org
    # Arrange
    adguid = uuid4()
    os2sync_mock = MagicMock()
    person_uuid = create_person.uuid
    os2sync_mock.os2sync_get_user.return_value = User(
        Uuid=person_uuid,
        UserId="BSG",
        Person=Person(Name="Brian", Uuid=uuid4()),
        Positions=[Position(Name="tester", OrgUnitUuid=uuid4())],
        PhoneNumber=None,
        Landline=None,
        Email=None,
    )
    itsystem_AD = await graphql_client.testing__get_itsystem(
        ITSystemFilter(user_keys=["Active Directory"], from_date=None, to_date=None)
    )
    AD_uuid = first(itsystem_AD.objects).uuid
    # AD user
    await graphql_client.testing__ituser_create(
        input=ITUserCreateInput(
            person=person_uuid,
            user_key="AD-username 1",
            external_id=str(adguid),
            engagements=[e.uuid for e in create_engagements],
            itsystem=AD_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    # Act
    await sync_mo_user_to_fk_org(
        uuid=person_uuid,
        graphql_client=graphql_client,
        settings=mock_settings,
        os2sync_client=os2sync_mock,
        dry_run=True,
    )
    # Assert
    assert os2sync_mock.update_user.call_count == 1
    os2sync_mock.delete_user.assert_not_called()

    expected = [
        call(
            User(
                Uuid=person_uuid,
                ShortKey=None,
                UserId="AD-username 1",
                Person=Person(
                    Name="Brian Graversen", Cpr=None, Uuid=hash_uuid(person_uuid)
                ),
                Positions=[
                    Position(
                        Name="Tester",
                        OrgUnitUuid=first(create_engagements).org_unit,
                        StartDate=None,
                        StopDate=None,
                    )
                ],
                PhoneNumber=None,
                Landline=None,
                Email=None,
                Location=None,
                RacfID=None,
                FMKID=None,
                DateTime=None,
            )
        ),
    ]
    assert os2sync_mock.update_user.call_args_list == expected

    # Check that the expected it-accounts exists in MO
    it_accounts = await graphql_client.read_user_i_t_accounts(
        uuid=person_uuid, it_user_keys=["Active Directory"]
    )
    # Because we ran in dry-run mode the fk-org it user should not be created
    assert one(it_accounts.objects).current.fk_org_uuids == []  # type: ignore


@pytest.mark.integration_test
async def test_two_ad_zero_fk(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    create_person,
    create_engagements,
    mock_settings,
) -> None:
    # Arrange
    adguid1 = uuid4()
    adguid2 = uuid4()
    os2sync_mock = MagicMock()
    person_uuid = create_person.uuid
    itsystem_AD = await graphql_client.testing__get_itsystem(
        ITSystemFilter(user_keys=["Active Directory"], from_date=None, to_date=None)
    )
    AD_uuid = first(itsystem_AD.objects).uuid
    # AD user 1
    await graphql_client.testing__ituser_create(
        input=ITUserCreateInput(
            person=person_uuid,
            user_key="AD-username 1",
            external_id=str(adguid1),
            engagements=[e.uuid for e in create_engagements],
            itsystem=AD_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    await graphql_client.testing__ituser_create(
        input=ITUserCreateInput(
            uuid=uuid4(),
            person=person_uuid,
            user_key="AD-username 2",
            external_id=str(adguid2),
            # TODO: connect some other engagement
            engagements=[e.uuid for e in create_engagements],
            itsystem=AD_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    expected = [
        call(
            User(
                Uuid=adguid1,
                ShortKey=None,
                UserId="AD-username 1",
                Person=Person(
                    Name="Brian Graversen", Cpr=None, Uuid=hash_uuid(person_uuid)
                ),
                Positions=[
                    Position(
                        Name="Tester",
                        OrgUnitUuid=first(create_engagements).org_unit,
                        StartDate=None,
                        StopDate=None,
                    )
                ],
                PhoneNumber=None,
                Landline=None,
                Email=None,
                Location=None,
                RacfID=None,
                FMKID=None,
                DateTime=None,
            )
        ),
        call(
            User(
                Uuid=adguid2,
                ShortKey=None,
                UserId="AD-username 2",
                Person=Person(
                    Name="Brian Graversen", Cpr=None, Uuid=hash_uuid(person_uuid)
                ),
                Positions=[
                    Position(
                        Name="Tester",
                        OrgUnitUuid=first(create_engagements).org_unit,
                        StartDate=None,
                        StopDate=None,
                    )
                ],
                PhoneNumber=None,
                Landline=None,
                Email=None,
                Location=None,
                RacfID=None,
                FMKID=None,
                DateTime=None,
            )
        ),
    ]
    # Act
    await sync_mo_user_to_fk_org(
        uuid=person_uuid,
        graphql_client=graphql_client,
        settings=mock_settings,
        os2sync_client=os2sync_mock,
    )
    # Assert
    assert os2sync_mock.update_user.call_count == len(expected)
    os2sync_mock.delete_user.assert_not_called()
    for c in os2sync_mock.update_user.call_args_list:
        assert c in expected

    # Check that the expected it-accounts exists in MO
    it_accounts = await graphql_client.read_user_i_t_accounts(
        uuid=person_uuid, it_user_keys=["Active Directory"]
    )
    fk_org_it_users = one(it_accounts.objects).current.fk_org_uuids  # type: ignore
    for fk_user in fk_org_it_users:
        if fk_user.user_key == str(adguid1):
            assert fk_user.external_id == str(adguid1)
        elif fk_user.user_key == str(adguid2):
            assert fk_user.external_id == str(adguid2)
        else:
            assert False


@pytest.mark.integration_test
async def test_no_fk_itsystem(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    create_person,
    create_engagements,
    mock_settings,
) -> None:
    # Arrange
    os2sync_mock = MagicMock()
    person_uuid = create_person.uuid
    fk_it = await graphql_client.find_f_k_itsystem()
    await graphql_client.testing__itsystem_terminate(
        input=ITSystemTerminateInput(
            uuid=one(fk_it.objects).uuid,
            # Terminate it-system from midnight
            to=datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
            - timedelta(days=1),
        )
    )
    # Act / Assert
    with pytest.raises(ITSystemError):
        await sync_mo_user_to_fk_org(
            uuid=person_uuid,
            graphql_client=graphql_client,
            settings=mock_settings,
            os2sync_client=os2sync_mock,
        )
