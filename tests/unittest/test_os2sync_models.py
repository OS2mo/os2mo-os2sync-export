# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID
from uuid import uuid4

import pytest

from os2sync_export.autogenerated_graphql_client.read_user import (
    ReadUserItusersObjectsCurrent,
)
from os2sync_export.autogenerated_graphql_client.read_user import (
    ReadUserItusersObjectsCurrentEmail,
)
from os2sync_export.autogenerated_graphql_client.read_user import (
    ReadUserItusersObjectsCurrentEmailAddressType,
)
from os2sync_export.autogenerated_graphql_client.read_user import (
    ReadUserItusersObjectsCurrentEngagement,
)
from os2sync_export.autogenerated_graphql_client.read_user import (
    ReadUserItusersObjectsCurrentPerson,
)
from os2sync_export.autogenerated_graphql_client.read_user import (
    ReadUserItusersObjectsCurrentPhone,
)
from os2sync_export.autogenerated_graphql_client.read_user import (
    ReadUserItusersObjectsCurrentPhoneAddressType,
)
from os2sync_export.os2sync_models import User
from os2sync_export.os2sync_models import convert_mo_to_fk_user

LANDLINE_CLASS_UUID = uuid4()
FK_ORG_USER_UUID = uuid4()
OBJECTGUID = uuid4()


def test_os2sync_user_model_no_input():
    with pytest.raises(ValueError):
        User()


mobile_class_uuid = uuid4()
email_class_uuid = uuid4()

landline_class_uuid = LANDLINE_CLASS_UUID


def gen_engagement(
    org_unit_uuid: UUID = uuid4(),
) -> ReadUserItusersObjectsCurrentEngagement:
    engagement = ReadUserItusersObjectsCurrentEngagement(
        **{  # type: ignore
            "org_unit": [
                {
                    "uuid": org_unit_uuid,
                    "org_unit_hierarchy_model": None,
                    "org_unit_level": None,
                    "unit_type": None,
                    "ancestors": [{"uuid": uuid4()}],
                }
            ],
            "job_function": {"name": "tester"},
        }
    )
    return engagement


def gen_os2mo_it_user(
    engagement: list[ReadUserItusersObjectsCurrentEngagement] | None,
) -> ReadUserItusersObjectsCurrent:
    person = ReadUserItusersObjectsCurrentPerson(
        cpr_number="1234567890", name="Bob", nickname="Bobby"
    )

    email = ReadUserItusersObjectsCurrentEmail(
        value="test@example.com",
        address_type=ReadUserItusersObjectsCurrentEmailAddressType(
            scope="Email", uuid=email_class_uuid
        ),
        visibility=None,
    )
    mobile = ReadUserItusersObjectsCurrentPhone(
        value="1234567890",
        address_type=ReadUserItusersObjectsCurrentPhoneAddressType(
            scope="PHONE", uuid=mobile_class_uuid
        ),
        visibility=None,
    )
    landline = ReadUserItusersObjectsCurrentPhone(
        value="+45 0987654321",
        address_type=ReadUserItusersObjectsCurrentPhoneAddressType(
            scope="PHONE", uuid=landline_class_uuid
        ),
        visibility=None,
    )
    return ReadUserItusersObjectsCurrent(
        person=[person],
        user_key="BOB",
        external_id=str(OBJECTGUID),
        email=[email],
        phone=[mobile, landline],
        engagement=engagement,
    )


def test_convert_mo_to_fk_user(set_settings):
    os2mo_it_user = gen_os2mo_it_user(engagement=[gen_engagement()])
    settings = set_settings(landline_scope_classes=[LANDLINE_CLASS_UUID])
    fk_user = convert_mo_to_fk_user(
        fk_org_uuid=FK_ORG_USER_UUID, user=os2mo_it_user, settings=settings
    )
    assert fk_user.Uuid == FK_ORG_USER_UUID
    assert fk_user.UserId == "BOB"
    assert fk_user.Person.Name == "Bobby"
    assert fk_user.Positions[0].Name == "tester"
    assert fk_user.Email == "test@example.com"
    assert fk_user.Landline == "+45 0987654321"
    assert fk_user.PhoneNumber == "1234567890"


def test_no_engagements(mock_settings):
    os2mo_it_user = gen_os2mo_it_user(engagement=[])
    with pytest.raises(ValueError):
        convert_mo_to_fk_user(
            fk_org_uuid=FK_ORG_USER_UUID, user=os2mo_it_user, settings=mock_settings
        )
