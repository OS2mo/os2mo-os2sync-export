# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
from unittest.mock import patch
from uuid import UUID
from uuid import uuid4

import pytest
from more_itertools import one

from os2sync_export.autogenerated_graphql_client.read_user_i_t_accounts import (
    ReadUserITAccountsEmployees,
)
from os2sync_export.autogenerated_graphql_client.read_user_i_t_accounts import (
    ReadUserITAccountsEmployeesObjectsCurrentFkOrgUuids,
)
from os2sync_export.autogenerated_graphql_client.read_user_i_t_accounts import (
    ReadUserITAccountsEmployeesObjectsCurrentItusers,
)
from os2sync_export.autogenerated_graphql_client.read_user_i_t_accounts import (
    ReadUserITAccountsEmployeesObjectsCurrentItusersEmail,
)
from os2sync_export.autogenerated_graphql_client.read_user_i_t_accounts import (
    ReadUserITAccountsEmployeesObjectsCurrentItusersEngagement,
)
from os2sync_export.autogenerated_graphql_client.read_user_i_t_accounts import (
    ReadUserITAccountsEmployeesObjectsCurrentItusersPerson,
)
from os2sync_export.os2mo_gql import choose_public_address
from os2sync_export.os2mo_gql import convert_and_filter
from os2sync_export.os2mo_gql import convert_to_os2sync
from os2sync_export.os2mo_gql import sync_mo_user_to_fk_org

BASE_ITUSER_RESPONSE = ReadUserITAccountsEmployeesObjectsCurrentItusers(
    uuid=uuid4(),
    user_key="test",
    external_id=str(uuid4()),
    email=[],
    phone=[],
    person=[
        ReadUserITAccountsEmployeesObjectsCurrentItusersPerson(
            name="Brian", nickname="", cpr_number=None
        )
    ],
    engagement=[
        ReadUserITAccountsEmployeesObjectsCurrentItusersEngagement(
            **{"job_function": {"name": "tester"}, "org_unit": [{"uuid": uuid4()}]}  # type: ignore
        )
    ],
)


@patch("os2sync_export.os2mo_gql.ensure_mo_fk_org_user_exists")
async def test_sync_mo_user_to_fk_no_users(
    update_mock, graphql_client, mock_settings, os2sync_client
):
    graphql_client.read_user_i_t_accounts.return_value = ReadUserITAccountsEmployees(
        **{"objects": [{"current": None}]}
    )
    await sync_mo_user_to_fk_org(
        graphql_client=graphql_client,
        uuid=uuid4(),
        settings=mock_settings,
        os2sync_client=os2sync_client,
    )
    update_mock.assert_not_called()


async def test_sync_mo_user_to_fk_one_it_user(
    graphql_client, mock_settings, os2sync_client
):
    it_users = ReadUserITAccountsEmployees(
        **{
            "objects": [
                {
                    "current": {
                        "itusers": [
                            {
                                "uuid": uuid4(),
                                "user_key": "BSG",
                                "external_id": str(uuid4()),
                                "phone": [
                                    {
                                        "address_type": {
                                            "uuid": uuid4(),
                                            "scope": "PHONE",
                                        },
                                        "visibility": {"user_key": "PUBLIC"},
                                        "value": "11223344",
                                    }
                                ],
                                "email": [
                                    {
                                        "address_type": {
                                            "uuid": uuid4(),
                                            "scope": "EMAIL",
                                        },
                                        "visibility": {"user_key": "PUBLIC"},
                                        "value": "bsg@digital-identity.dk",
                                    }
                                ],
                                "person": [
                                    {
                                        "name": "Brian Storm Graversen",
                                        "nickname": "",
                                        "cpr_number": 1234567890,
                                    }
                                ],
                                "engagement": [
                                    {
                                        "org_unit": [{"uuid": uuid4()}],
                                        "job_function": {
                                            "name": "open source developer"
                                        },
                                    }
                                ],
                            }
                        ],
                        "fk_org_uuids": [],
                    }
                }
            ]
        }
    )
    graphql_client.read_user_i_t_accounts.return_value = it_users
    await sync_mo_user_to_fk_org(
        graphql_client=graphql_client,
        uuid=uuid4(),
        settings=mock_settings,
        os2sync_client=os2sync_client,
    )
    os2sync_client.delete_user.assert_not_called()
    ituser = it_users.objects[0].current.itusers[0]
    os2sync_client.update_user.assert_called_once_with(
        convert_to_os2sync(mock_settings, ituser, UUID(ituser.external_id))
    )


async def test_sync_mo_user_to_fk_delete_user(
    graphql_client, mock_settings, os2sync_client
):
    it_users = ReadUserITAccountsEmployees(
        **{
            "objects": [
                {
                    "current": {
                        "itusers": [],
                        "fk_org_uuids": [
                            {
                                "user_key": str(uuid4()),
                                "external_id": str(uuid4()),
                            }
                        ],
                    }
                }
            ]
        }
    )
    graphql_client.read_user_i_t_accounts.return_value = it_users
    await sync_mo_user_to_fk_org(
        graphql_client=graphql_client,
        uuid=uuid4(),
        settings=mock_settings,
        os2sync_client=os2sync_client,
    )
    os2sync_client.update_user.assert_not_called()
    os2sync_client.delete_user.assert_called_once_with(
        UUID(it_users.objects[0].current.fk_org_uuids[0].external_id)
    )


def test_convert_to_os2sync(mock_settings):
    mo_it_user = BASE_ITUSER_RESPONSE.copy()
    mo_it_user.person = [
        ReadUserITAccountsEmployeesObjectsCurrentItusersPerson(
            name="Brian", nickname=""
        )
    ]
    os2sync_user = convert_to_os2sync(
        mock_settings, mo_it_user, UUID(mo_it_user.external_id)
    )
    assert os2sync_user.Person.Name == "Brian"


def test_convert_to_os2sync_nickname(mock_settings):
    mo_it_user = BASE_ITUSER_RESPONSE.copy()
    mo_it_user.person = [
        ReadUserITAccountsEmployeesObjectsCurrentItusersPerson(
            name="Brian", nickname="STORMEN"
        )
    ]
    os2sync_user = convert_to_os2sync(
        mock_settings, mo_it_user, UUID(mo_it_user.external_id)
    )
    assert os2sync_user.Person.Name == "STORMEN"


@pytest.mark.parametrize("sync_cpr", [True, False])
def test_convert_to_os2sync_cpr(sync_cpr, set_settings):
    settings = set_settings(sync_cpr=sync_cpr)
    mo_it_user = BASE_ITUSER_RESPONSE.copy()
    mo_it_user.person = [
        ReadUserITAccountsEmployeesObjectsCurrentItusersPerson(
            name="Brian", nickname="STORMEN", cpr_number="1234567890"
        )
    ]
    os2sync_user = convert_to_os2sync(
        settings, mo_it_user, UUID(mo_it_user.external_id)
    )
    if sync_cpr:
        assert os2sync_user.Person.Cpr == "1234567890"
    else:
        assert os2sync_user.Person.Cpr is None


@pytest.mark.parametrize("use_extension_field_as_job_function", [True, False])
def test_convert_to_os2sync_extension_job_function(
    use_extension_field_as_job_function, set_settings
):
    settings = set_settings(
        use_extension_field_as_job_function=use_extension_field_as_job_function
    )
    mo_it_user = BASE_ITUSER_RESPONSE.copy()
    mo_it_user.engagement = [
        ReadUserITAccountsEmployeesObjectsCurrentItusersEngagement(
            **{
                "extension_3": "Konge",
                "org_unit": [{"uuid": uuid4()}],
                "job_function": {"name": "Udvikler"},
            }
        )
    ]
    os2sync_user = convert_to_os2sync(
        settings, mo_it_user, UUID(mo_it_user.external_id)
    )
    if use_extension_field_as_job_function:
        assert os2sync_user.Positions[0].Name == "Konge"
    else:
        assert os2sync_user.Positions[0].Name == "Udvikler"


def test_convert_and_filter_same_uuid(mock_settings):
    """Tests that with an ituser and fk-org user with the same external id, that id is used for os2sync"""
    user_key = "SamAccountName"
    it_user = BASE_ITUSER_RESPONSE.copy()
    it_user.user_key = user_key
    fk_org_user = ReadUserITAccountsEmployeesObjectsCurrentFkOrgUuids(
        external_id=it_user.external_id, user_key=user_key
    )
    os2sync_update, os2sync_delete = convert_and_filter(
        settings=mock_settings, it_users=[it_user], fk_org_users=[fk_org_user]
    )
    assert one(os2sync_update).Uuid == UUID(fk_org_user.external_id)
    assert os2sync_delete == set()


def test_convert_and_filter_different_uuid(mock_settings):
    """Tests that with an ituser and fk-org user with different external ids, the id from fk-org system is used for os2sync"""
    user_key = "SamAccountName"
    it_user = BASE_ITUSER_RESPONSE.copy()
    it_user.user_key = user_key
    fk_org_user = ReadUserITAccountsEmployeesObjectsCurrentFkOrgUuids(
        external_id=str(uuid4()), user_key=user_key
    )
    os2sync_update, os2sync_delete = convert_and_filter(
        settings=mock_settings, it_users=[it_user], fk_org_users=[fk_org_user]
    )
    assert one(os2sync_update).Uuid == UUID(fk_org_user.external_id)
    assert os2sync_delete == set()


def test_convert_and_filter_no_fk_user(mock_settings):
    """Tests that with an ituser and not fk-org user the it-users external id is used for os2sync"""
    user_key = "SamAccountName"
    it_user = BASE_ITUSER_RESPONSE.copy()
    it_user.user_key = user_key
    os2sync_update, os2sync_delete = convert_and_filter(
        settings=mock_settings, it_users=[it_user], fk_org_users=[]
    )
    assert one(os2sync_update).Uuid == UUID(it_user.external_id)
    assert os2sync_delete == set()


def test_convert_and_filter_no_ituser(mock_settings):
    """Tests that with an fk-org user exists but no ituser, the fk-org account is deleted"""
    user_key = "SamAccountName"
    fk_org_user = ReadUserITAccountsEmployeesObjectsCurrentFkOrgUuids(
        external_id=str(uuid4()), user_key=user_key
    )
    os2sync_update, os2sync_delete = convert_and_filter(
        settings=mock_settings, it_users=[], fk_org_users=[fk_org_user]
    )
    assert os2sync_update == []
    assert os2sync_delete == set([UUID(fk_org_user.external_id)])


def test_convert_and_filter_different_user_key(mock_settings):
    """Tests that when two different accounts exists in fk-org-users and it-users the new ituser is used for os2sync, and the old fk-org account is deleted"""
    it_user = BASE_ITUSER_RESPONSE.copy()
    it_user.user_key = "user_key_1"
    fk_org_user = ReadUserITAccountsEmployeesObjectsCurrentFkOrgUuids(
        external_id=str(uuid4()), user_key="user_key_2"
    )
    os2sync_update, os2sync_delete = convert_and_filter(
        settings=mock_settings, it_users=[it_user], fk_org_users=[fk_org_user]
    )
    assert one(os2sync_update).Uuid == UUID(it_user.external_id)
    assert os2sync_delete == set([UUID(fk_org_user.external_id)])


def test_convert_and_filter_no_engagement(mock_settings):
    """Tests that when an account has no engagements it is deleted"""
    user_key = "SamAccountName"
    it_user = BASE_ITUSER_RESPONSE.copy()
    fk_org_user = ReadUserITAccountsEmployeesObjectsCurrentFkOrgUuids(
        external_id=str(uuid4()), user_key=user_key
    )
    it_user.user_key = user_key
    it_user.engagement = []
    os2sync_update, os2sync_delete = convert_and_filter(
        settings=mock_settings, it_users=[it_user], fk_org_users=[fk_org_user]
    )
    assert os2sync_update == []
    assert os2sync_delete == set(
        [UUID(fk_org_user.external_id)],
    )


@pytest.mark.parametrize(
    "emails,priority,expected",
    [
        (
            [
                ReadUserITAccountsEmployeesObjectsCurrentItusersEmail(
                    **{"value": "test", "address_type": {"uuid": uuid4()}}
                )
            ],
            [],
            "test",
        )
    ],
)
def test_choose_address_emails(emails, priority, expected):
    breakpoint()
    value = choose_public_address(emails, priority)
    assert value == expected
