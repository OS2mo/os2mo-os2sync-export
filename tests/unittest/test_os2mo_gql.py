# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
from unittest.mock import MagicMock
from uuid import UUID
from uuid import uuid4

from os2sync_export.autogenerated_graphql_client.read_user_i_t_accounts import (
    ReadUserITAccountsEmployees,
)
from os2sync_export.os2mo_gql import OS2SyncExporter


async def test_sync_mo_user_to_fk_no_users(graphql_client, mock_settings):
    os2sync_exporter = OS2SyncExporter(
        settings=mock_settings,
        os2sync_client=MagicMock(),
        graphql_client=graphql_client,
    )

    graphql_client.read_user_i_t_accounts.return_value = ReadUserITAccountsEmployees(
        **{"objects": [{"current": None}]}
    )
    await os2sync_exporter.sync_mo_user_to_fk_org(uuid=uuid4())
    os2sync_exporter.os2sync_client.sync_user.assert_not_called()


async def test_sync_mo_user_to_fk_one_it_user(graphql_client, mock_settings):
    os2sync_exporter = OS2SyncExporter(
        settings=mock_settings,
        os2sync_client=MagicMock(),
        graphql_client=graphql_client,
    )

    it_users = ReadUserITAccountsEmployees(
        **{
            "objects": [
                {
                    "current": {
                        "AD_users": [
                            {
                                "uuid": uuid4(),
                                "user_key": str(uuid4()),
                                "external_id": str(uuid4()),
                            }
                        ],
                        "fk_org_users": [],
                    }
                }
            ]
        }
    )
    graphql_client.read_user_i_t_accounts.return_value = it_users
    await os2sync_exporter.sync_mo_user_to_fk_org(uuid=uuid4())
    os2sync_exporter.os2sync_client.sync_user.assert_called_once_with(
        it_users.objects[0].current.a_d_users[0]
    )
    os2sync_exporter.os2sync_client.delete_user.assert_not_called()


async def test_sync_mo_user_to_fk_delete_user(graphql_client, mock_settings):
    os2sync_exporter = OS2SyncExporter(
        settings=mock_settings,
        os2sync_client=MagicMock(),
        graphql_client=graphql_client,
    )
    it_users = ReadUserITAccountsEmployees(
        **{
            "objects": [
                {
                    "current": {
                        "AD_users": [],
                        "fk_org_users": [
                            {
                                "user_key": str(uuid4()),
                                "external_id": str(uuid4()),
                            }
                        ],
                    }
                }
            ]
        }
    )
    graphql_client.read_user_i_t_accounts.return_value = it_users
    await os2sync_exporter.sync_mo_user_to_fk_org(uuid=uuid4())
    os2sync_exporter.os2sync_client.sync_user.assert_not_called()
    os2sync_exporter.os2sync_client.delete_user.assert_called_once_with(
        UUID(it_users.objects[0].current.fk_org_users[0].external_id)
    )
