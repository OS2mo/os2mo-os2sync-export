# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
from collections.abc import AsyncIterator
from datetime import datetime
from typing import Any
from typing import Callable
from typing import Generator
from unittest.mock import AsyncMock
from unittest.mock import MagicMock
from uuid import uuid4

import pytest
from fastapi import FastAPI
from httpx import AsyncClient
from more_itertools import first
from pydantic import SecretStr
from pytest import MonkeyPatch

from os2sync_export.autogenerated_graphql_client import GraphQLClient
from os2sync_export.autogenerated_graphql_client.input_types import ClassFilter
from os2sync_export.autogenerated_graphql_client.input_types import EmployeeCreateInput
from os2sync_export.autogenerated_graphql_client.input_types import (
    EngagementCreateInput,
)
from os2sync_export.autogenerated_graphql_client.input_types import FacetFilter
from os2sync_export.autogenerated_graphql_client.input_types import (
    OrganisationUnitCreateInput,
)
from os2sync_export.autogenerated_graphql_client.input_types import RAValidityInput
from os2sync_export.config import AMQPConnectionSettings
from os2sync_export.config import FastRAMQPISettings
from os2sync_export.config import Settings
from os2sync_export.main import create_app
from os2sync_export.os2sync import WritableOS2SyncClient

DEFAULT_AMQP_URL = "amqp://guest:guest@msg_broker:5672/os2mo"


@pytest.fixture
async def app(monkeypatch: MonkeyPatch) -> FastAPI:
    app = create_app()
    return app


@pytest.fixture
async def graphql_client(mo_client: AsyncClient) -> AsyncIterator[GraphQLClient]:
    """Authenticated GraphQL codegen client for OS2mo."""
    graphql_client = GraphQLClient(
        url=f"{mo_client.base_url}/graphql/v25",
        http_client=mo_client,
    )
    async with graphql_client as client:
        yield client


@pytest.fixture()
def set_settings() -> Generator[Callable[..., Settings], None, None]:
    """Fixture to mock get_settings."""

    def setup_mock_settings(
        *args: Any,
        municipality=1234,
        top_unit_uuid="baccbf9b-d699-4118-a6fe-aeb813631a15",
        amqp_url: str = DEFAULT_AMQP_URL,
        client_id: str = "tester",
        client_secret: SecretStr = SecretStr("hunter2"),
        **kwargs: Any,
    ) -> Settings:
        settings = Settings(
            *args,
            municipality=municipality,
            top_unit_uuid=top_unit_uuid,
            fastramqpi=FastRAMQPISettings(
                amqp=AMQPConnectionSettings(url=amqp_url),  # type: ignore
                client_id=client_id,
                client_secret=client_secret,
            ),  # type: ignore
            **kwargs,
        )
        return settings

    yield setup_mock_settings


@pytest.fixture()
def mock_settings(
    set_settings: Callable[..., Settings],
) -> Generator[Settings, None, None]:
    """Fixture to mock get_settings."""
    yield set_settings()


@pytest.fixture
def graphql_session() -> Generator[AsyncMock, None, None]:
    """Fixture for the GraphQL session."""
    yield AsyncMock()


@pytest.fixture
def mock_graphql_client() -> Generator[AsyncMock, None, None]:
    """Fixture for the codegen client."""
    yield AsyncMock()


@pytest.fixture
def requests_session() -> Generator[MagicMock, None, None]:
    """Fixture for the requests session."""
    yield MagicMock()


@pytest.fixture
def mock_os2sync_client(
    mock_settings, requests_session
) -> Generator[WritableOS2SyncClient, None, None]:
    """Fixture for the os2sync_client."""
    yield WritableOS2SyncClient(settings=mock_settings, session=requests_session)


@pytest.fixture
def os2sync_client() -> Generator[AsyncMock, None, None]:
    """Fixture for the ModelClient."""
    yield AsyncMock()


@pytest.fixture
async def create_org_unit(graphql_client: GraphQLClient, mock_settings):
    all_org_unit_types = await graphql_client.testing__get_class(
        ClassFilter(
            facet=FacetFilter(
                user_keys=["org_unit_type"], from_date=None, to_date=None
            ),
            from_date=None,
            to_date=None,
        )
    )

    org_unit_type = first(all_org_unit_types.objects).uuid

    await graphql_client.testing__org_unit_create(
        input=OrganisationUnitCreateInput(
            uuid=mock_settings.top_unit_uuid,
            name="Andeby kommune",
            org_unit_type=org_unit_type,
            parent=None,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )
    return await graphql_client.testing__org_unit_create(
        input=OrganisationUnitCreateInput(
            name="Andeby RÃ¥dhus",
            org_unit_type=org_unit_type,
            parent=mock_settings.top_unit_uuid,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )


@pytest.fixture
async def create_person(
    graphql_client: GraphQLClient,
):
    return await graphql_client.testing__employee_create(
        input=EmployeeCreateInput(
            uuid=uuid4(),
            given_name="Brian",
            surname="Graversen",
            user_key="BSG",
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        )
    )


@pytest.fixture
async def create_engagements(
    graphql_client: GraphQLClient, create_person, create_org_unit
):
    engagement_uuid1, engagement_uuid2 = uuid4(), uuid4()
    all_engagement_types = await graphql_client.testing__get_class(
        ClassFilter(
            facet=FacetFilter(
                user_keys=["engagement_type"], from_date=None, to_date=None
            ),
            from_date=None,
            to_date=None,
        )
    )

    engagement_type = first(all_engagement_types.objects).uuid
    all_job_functions = await graphql_client.testing__get_class(
        ClassFilter(
            user_keys=["tester"],
            facet=FacetFilter(
                user_keys=["engagement_job_function"], from_date=None, to_date=None
            ),
            from_date=None,
            to_date=None,
        )
    )

    job_function = first(all_job_functions.objects).uuid
    engagements = [
        EngagementCreateInput(
            uuid=engagement_uuid1,
            employee=create_person.uuid,
            org_unit=create_org_unit.uuid,
            user_key="eng1",
            engagement_type=engagement_type,
            job_function=job_function,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        ),
        EngagementCreateInput(
            uuid=engagement_uuid2,
            employee=create_person.uuid,
            org_unit=create_org_unit.uuid,
            user_key="eng2",
            engagement_type=engagement_type,
            job_function=job_function,
            validity=RAValidityInput(from_=datetime(1970, 1, 1), to=None),  # type: ignore
        ),
    ]
    for e in engagements:
        await graphql_client.testing__engagement_create(input=e)
    return engagements
